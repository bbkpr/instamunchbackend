interface MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

type Item {
  id: ID!
  name: String
  # A default price if no other price policies are set
  basePrice: Float
  # How long, on average, until the expiration of this item when newly purchased.
  expirationPeriod: String
}

type MachineItem {
  id: ID!
  name: String
  machine: Machine
  item: Item
}

type MachineLocation {
  id: ID!
  name: String!
  address1: String!
  address2: String
  city: String!
  stateOrProvince: String!
  country: String!
}

type Machine {
  id: ID!
  name: String
  items: [MachineItem]
}

#
# Query
#

type Query {
  machines: [Machine]
  machineItems: [MachineItem]
}

#
# Mutation
#

input CreateMachineLocationInput {
  name: String!
  address1: String!
  address2: String
  city: String!
  stateOrProvince: String!
  country: String!
}

input CreateMachineInput {
  name: String
  machineLocation: CreateMachineLocationInput
}

input CreateItem {
  name: String
  # A default price if no other price policies are set
  basePrice: Float
  # How long, on average, until the expiration of this item when newly purchased.
  expirationPeriod: String
}

type Mutation {
  createMachine(machine: CreateMachineInput): Machine
}

type UpdateMachineItemsMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  machineItems: [MachineItem]
}
