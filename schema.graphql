interface MutationResponse {
    code: String!
    success: Boolean!
    message: String!
}

type Item {
    id: ID!
    name: String
    # A default price if no other price policies are set
    basePrice: Float
    # How long, on average, until the expiration of this item when newly purchased.
    expirationPeriod: String
    createdAt: String
    updatedAt: String
    machineItems: [MachineItem]
}

type MachineItem {
    id: ID!
    name: String
    machineId: ID!
    machine: Machine
    itemId: ID!
    item: Item
}

type Machine {
    id: ID!
    name: String
    machineItems: [MachineItem]
    createdAt: String
    updatedAt: String
}

type Location {
    id: ID!
    address1: String!
    address2: String
    city: String!
    stateOrProvince: String!
    country: String!
    createdAt: String!
    updatedAt: String!
    machineLocations: [MachineLocation]
}

type MachineLocation {
    id: ID!
    name: String!
    machineId: ID!
    machine: Machine!
    locationId: ID!
    location: Location!
    createdAt: String!
    updatedAt: String!
}

#
# Query
#

type Query {
    machines: [Machine]
    machineItems: [MachineItem]
}

#
# Mutation
#

input CreateMachineInput {
    name: String
}

input UpdateMachineInput {
    id: ID!
    name: String
}

input CreateItemInput {
    name: String!
    basePrice: Float
    expirationPeriod: String
}

input UpdateItemInput {
    id: ID!
    name: String
    basePrice: Float
    expirationPeriod: String
}

input CreateLocationInput {
    address1: String!
    address2: String
    city: String!
    stateOrProvince: String!
    country: String!
}

input UpdateLocationInput {
    id: ID!
    address1: String
    address2: String
    city: String
    stateOrProvince: String
    country: String
}

input CreateMachineLocationInput {
    name: String!
    machineId: ID!
    locationId: ID!
}

input UpdateMachineLocationInput {
    id: ID!
    name: String
    machineId: ID
    locationId: ID
}

input CreateMachineItemInput {
    machineId: ID!
    itemId: ID!
    name: String
}

# Update and overwrite ALL Items in the Machine
input UpdateMachineItemsInput {
    machineId: ID!
    itemIds: [ID!]!
}

type CreateMachineMutationResponse implements MutationResponse {
    code: String!
    success: Boolean!
    message: String!
    machine: Machine!
}

type UpdateMachineMutationResponse implements MutationResponse {
    code: String!
    success: Boolean!
    message: String!
    machine: Machine!
}

type DeleteMachineMutationResponse implements MutationResponse {
    code: String!
    success: Boolean!
    message: String!
}

type CreateLocationMutationResponse implements MutationResponse {
    code: String!
    success: Boolean!
    message: String!
    location: Location!
}

type UpdateLocationMutationResponse implements MutationResponse {
    code: String!
    success: Boolean!
    message: String!
    location: Location!
}

type DeleteLocationMutationResponse implements MutationResponse {
    code: String!
    success: Boolean!
    message: String!
}

type CreateMachineLocationMutationResponse implements MutationResponse {
    code: String!
    success: Boolean!
    message: String!
    machineLocation: MachineLocation!
}

type UpdateMachineLocationMutationResponse implements MutationResponse {
    code: String!
    success: Boolean!
    message: String!
    machineLocation: MachineLocation!
}

type DeleteMachineLocationMutationResponse implements MutationResponse {
    code: String!
    success: Boolean!
    message: String!
}

type CreateMachineItemMutationResponse implements MutationResponse {
    code: String!
    success: Boolean!
    message: String!
    machineItem: MachineItem!
}

type DeleteMachineItemMutationResponse implements MutationResponse {
    code: String!
    success: Boolean!
    message: String!
}

type UpdateMachineItemsMutationResponse implements MutationResponse {
    code: String!
    success: Boolean!
    message: String!
    machineItems: [MachineItem]
}

type CreateItemMutationResponse implements MutationResponse {
    code: String!
    success: Boolean!
    message: String!
    item: Item!
}

type UpdateItemMutationResponse implements MutationResponse {
    code: String!
    success: Boolean!
    message: String!
    item: Item!
}

type DeleteItemMutationResponse implements MutationResponse {
    code: String!
    success: Boolean!
    message: String!
}

type Mutation {
    # Machine operations
    createMachine(input: CreateMachineInput!): CreateMachineMutationResponse!
    updateMachine(input: UpdateMachineInput!): CreateMachineMutationResponse!
    deleteMachine(id: ID!): DeleteMachineMutationResponse!

    # Location operations
    createLocation(input: CreateLocationInput!): CreateLocationMutationResponse!
    updateLocation(input: UpdateLocationInput!): UpdateLocationMutationResponse!
    deleteLocation(id: ID!): DeleteLocationMutationResponse!

    # MachineLocation (join) operations
    createMachineLocation(input: CreateMachineLocationInput!): CreateMachineLocationMutationResponse!
    updateMachineLocation(input: UpdateMachineLocationInput!): UpdateMachineLocationMutationResponse!
    deleteMachineLocation(id: ID!): DeleteMachineLocationMutationResponse!

    # Item operations
    createItem(input: CreateItemInput!): CreateItemMutationResponse!
    updateItem(input: UpdateItemInput!): UpdateItemMutationResponse!
    deleteItem(id: ID!): DeleteItemMutationResponse!

    # MachineItem operations
    createMachineItem(input: CreateMachineItemInput!): CreateMachineItemMutationResponse!
    updateMachineItems(input: UpdateMachineItemsInput!): UpdateMachineItemsMutationResponse!
    deleteMachineItem(id: ID!): DeleteMachineItemMutationResponse!
}